

  -----
  Features

  Implement a dynamic roster schedule management system for the TUIfly Time-Off application that allows admins to configure request deadlines based on actual TUIfly roster publication dates.

REQUIREMENTS:

1. **Create Database Model for Roster Schedule:**
   - Create new Sequelize model: `src/models/RosterSchedule.js`
   - Fields: id, publicationDate, latestRequestDate, startPeriod, endPeriod, isActive, createdAt, updatedAt
   - Add to `src/models/index.js` exports
   - Include model sync in database initialization

2. **Create App Settings Model:**
   - Create `src/models/AppSetting.js` for global configuration
   - Fields: id, key, value, type, description, createdAt, updatedAt
   - Default settings:
     * MAX_ADVANCE_MONTHS: 6
     * FALLBACK_MIN_ADVANCE_DAYS: 60  
     * FALLBACK_MAX_ADVANCE_DAYS: 180
   - Add to models index and sync

3. **Admin Interface for Roster Schedule Management:**
   - Add new routes to `src/routes/admin.js`:
     * GET `/admin/roster-schedule` - Admin roster management page
     * GET `/admin/settings` - Global settings management page
   - Create EJS template `src/views/pages/admin-roster-schedule.ejs` with:
     * Table showing all roster periods with edit/delete actions
     * Form to add new roster periods (modal)
     * CSV upload functionality for bulk import
     * Visual timeline of upcoming deadlines
     * Settings panel for global configuration
   - Create `src/views/pages/admin-settings.ejs` for app settings

4. **API Endpoints for Roster Management:**
   - Add to `src/routes/api.js`:
     * GET `/api/admin/roster-schedule` - Get all roster periods
     * POST `/api/admin/roster-schedule` - Add new roster period
     * PUT `/api/admin/roster-schedule/:id` - Update roster period
     * DELETE `/api/admin/roster-schedule/:id` - Delete roster period
     * POST `/api/admin/roster-schedule/upload-csv` - Bulk CSV import
     * GET `/api/admin/settings` - Get app settings
     * PUT `/api/admin/settings` - Update app settings
     * GET `/api/calendar/request-deadline/:date` - Get deadline for specific date

5. **Dynamic Request Deadline Calculation:**
   - Update `public/js/calendar/calendar-core.js` with new validation logic:
     * Replace hardcoded advance days with dynamic lookup
     * Function `getRequestDeadlineForDate(targetDate)` that queries roster schedule
     * Function `isDateRequestable(targetDate)` using roster data
     * Fallback to app settings if no roster period found
   - Update calendar UI to show request deadlines as visual markers

6. **CSV Import Functionality:**
   - Support CSV format:
     ```csv
     Publication Date,Latest Request Date,Start Period,End Period
     2024-10-04,2024-09-19,2024-11-04,2024-12-01
     ```
   - Include CSV parsing, validation, and bulk insert
   - Show preview before confirming import
   - Handle duplicate date ranges

7. **Calendar Integration Updates:**
   - Update calendar rendering to show:
     * Request deadline dates with special styling
     * Tooltip showing "Request deadline: [date]" for each period
     * Gray out dates past their request deadline
     * Different colors for dates with known vs fallback deadlines
   - Update date selection validation to use roster schedule

8. **Admin Interface Features:**
   - Sortable table of roster periods
   - Search/filter roster periods by date range
   - Bulk delete functionality
   - Export current schedule to CSV
   - Warning alerts for missing future roster periods
   - Settings panel with form validation

9. **Database Seeding:**
   - Create `scripts/seedRosterSchedule.js` with TUIfly roster data
   - Populate with the provided 2024-2025 roster schedule
   - Include in package.json as `npm run seed:roster`

10. **Validation & Error Handling:**
    - Prevent overlapping roster periods
    - Ensure logical date sequence (request < publication < start < end)
    - Validate CSV format and data integrity
    - User-friendly error messages for date conflicts
    - Admin warnings for gaps in roster coverage

11. **User Experience Enhancements:**
    - When user selects dates, show applicable request deadline
    - Clear error messages: "Request deadline for this period was [date]"
    - Suggest next available dates if current selection invalid
    - Loading states during roster data fetching

12. **Frontend JavaScript Files:**
    - Create `public/js/pages/admin-roster.js` for admin interface
    - Create `public/js/core/roster-api.js` for roster API calls
    - Update existing calendar files to integrate roster logic

TECHNICAL SPECIFICATIONS:
- Use existing authentication/authorization (requireAuth, requireOnboarding)
- Maintain Bootstrap 5 styling and existing modal patterns
- Follow current API response format (ApiResponse utility)
- Include comprehensive error handling and logging
- Add JSDoc documentation to all functions
- Ensure mobile responsive design
- Use existing notification system (toasts/alerts)

INTEGRATION REQUIREMENTS:
- Extend existing admin panel navigation
- Hook into current calendar date validation system  
- Use existing database connection and Sequelize setup
- Maintain compatibility with current user permission system
- Preserve existing functionality as fallback

ADMIN PERMISSION REQUIREMENTS:
- Only users with admin role can access roster management
- Add admin role check middleware to all roster endpoints
- Include audit logging for roster schedule changes

The system should allow TUIfly to easily manage their roster schedule without code deployments, providing accurate request deadlines based on actual airline operations.