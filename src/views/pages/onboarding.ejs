<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css"
      rel="stylesheet"
    />
    <style>
      :root {
        --tuifly-blue: #007bff;
        --tuifly-yellow: #ffc107;
      }

      body {
        background: linear-gradient(135deg, var(--tuifly-blue) 0%, #0056b3 100%);
        min-height: 100vh;
        padding: 20px 0;
      }

      .onboarding-container {
        max-width: 600px;
        margin: 0 auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        overflow: hidden;
      }

      .onboarding-header {
        background: linear-gradient(135deg, var(--tuifly-blue) 0%, #0056b3 100%);
        color: white;
        padding: 30px;
        text-align: center;
      }

      .onboarding-header i {
        font-size: 3rem;
        margin-bottom: 10px;
      }

      .onboarding-body {
        padding: 40px;
      }

      .form-control {
        border-radius: 10px;
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
      }

      .form-control:focus {
        border-color: var(--tuifly-blue);
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
      }

      .form-label {
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
      }

      .btn-primary {
        background: var(--tuifly-blue);
        border-color: var(--tuifly-blue);
        padding: 12px 30px;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
      }

      .btn-primary:hover {
        background: #0056b3;
        border-color: #0056b3;
        transform: translateY(-2px);
      }

      .progress {
        height: 8px;
        border-radius: 10px;
        margin-bottom: 30px;
      }

      .progress-bar {
        background: var(--tuifly-blue);
        border-radius: 10px;
      }

      .step {
        display: none;
      }

      .step.active {
        display: block;
        animation: fadeIn 0.5s ease-in;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .welcome-info {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 30px;
        border-left: 4px solid var(--tuifly-blue);
      }

      .code-input {
        text-transform: uppercase;
        font-weight: bold;
        font-size: 1.1rem;
        text-align: center;
        border-radius: 10px !important;
        border: 2px solid #e9ecef;
      }

      .code-input:focus {
        border-color: var(--tuifly-blue);
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
      }

      .email-method-card {
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .email-method-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
      }

      .email-method-card.selected {
        transform: translateY(-5px);
        box-shadow: 0 5px 20px rgba(0,123,255,0.3);
      }

      @media (max-width: 768px) {
        .onboarding-container {
          margin: 0 15px;
        }
        .onboarding-body {
          padding: 30px 20px;
        }
      }
    </style>
  </head>
  <body>
    <div class="onboarding-container">
      <div class="onboarding-header">
        <i class="bi bi-person-plus"></i>
        <h2>Welcome to TUIfly Time-Off</h2>
        <p class="mb-0">Let's set up your profile</p>
      </div>

      <div class="onboarding-body">
        <!-- Progress bar -->
        <div class="progress">
          <div class="progress-bar" role="progressbar" style="width: 25%"></div>
        </div>

        <!-- Welcome Step -->
        <div class="step active" id="step1">
          <div class="welcome-info">
            <h4><i class="bi bi-info-circle text-primary me-2"></i>Welcome, <%= user.email %>!</h4>
            <p class="mb-0">
              To get started, we need to set up your pilot profile. This information will be used for your time-off requests and email signatures.
            </p>
          </div>
          <div class="text-center">
            <button type="button" class="btn btn-primary" onclick="nextStep(2)">
              Get Started <i class="bi bi-arrow-right ms-2"></i>
            </button>
          </div>
        </div>

        <!-- Profile Setup Step -->
        <div class="step" id="step2">
          <h4>Profile Information</h4>
          <p class="text-muted mb-4">Enter your basic profile details</p>

          <div class="mb-4">
            <label for="name" class="form-label">
              <i class="bi bi-person me-2"></i>Full Name
            </label>
            <input
              type="text"
              class="form-control"
              id="name"
              name="name"
              value="<%= user.name || '' %>"
              placeholder="Enter your full name"
              required
            />
            <div class="form-text">This will be used in your email signatures and official requests</div>
            <div class="invalid-feedback"></div>
          </div>

          <div class="mb-4">
            <label for="code" class="form-label">
              <i class="bi bi-badge me-2"></i>3-Letter Pilot Code
            </label>
            <input
              type="text"
              class="form-control code-input"
              id="code"
              name="code"
              maxlength="3"
              placeholder="ABC"
              required
            />
            <div class="form-text">Your unique 3-letter pilot identification code (e.g., RVB, ABC, XYZ)</div>
            <div class="invalid-feedback"></div>
          </div>

          <div class="mb-4">
            <label for="signature" class="form-label">
              <i class="bi bi-pencil me-2"></i>Email Signature
            </label>
            <textarea
              class="form-control"
              id="signature"
              name="signature"
              rows="4"
              placeholder="Brgds,
<%= user.name || 'Your Name' %>"
              required
            ></textarea>
            <div class="form-text">Your email signature will be automatically added to time-off request emails</div>
            <div class="invalid-feedback"></div>
          </div>

          <div class="text-center">
            <button type="button" class="btn btn-outline-secondary me-2" onclick="prevStep(1)">
              <i class="bi bi-arrow-left me-2"></i>Back
            </button>
            <button type="button" class="btn btn-primary" onclick="nextStep(3)">
              Continue <i class="bi bi-arrow-right ms-2"></i>
            </button>
          </div>
        </div>

        <!-- Email Preference Step -->
        <div class="step" id="step3">
          <h4>Choose Your Email Method</h4>
          <p class="text-muted mb-4">Select how you want to handle time-off request emails</p>

          <!-- Gmail Success Message -->
          <% if (typeof gmailSuccess !== 'undefined' && gmailSuccess) { %>
          <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle me-2"></i>
            <strong>Gmail Authorization Successful!</strong> You can now use automatic email sending.
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
          </div>
          <% } %>

          <div class="row mb-4">
            <div class="col-md-6 mb-3">
              <div class="card email-method-card h-100" id="manualCard" onclick="selectEmailPreference('manual')">
                <div class="card-body text-center p-4">
                  <div class="mb-3">
                    <i class="bi bi-envelope fs-1 text-success"></i>
                  </div>
                  <h5 class="card-title mb-3">ðŸ“§ Manual</h5>
                  <p class="card-text text-muted mb-3">Copy email content and send from your own email client</p>
                  <div class="alert alert-success">
                    <small><strong>Privacy:</strong> No Gmail access needed</small>
                  </div>
                </div>
              </div>
            </div>

            <div class="col-md-6 mb-3">
              <div class="card email-method-card h-100" id="automaticCard" onclick="selectEmailPreference('automatic')">
                <div class="card-body text-center p-4">
                  <div class="mb-3">
                    <i class="bi bi-robot fs-1 text-primary"></i>
                  </div>
                  <h5 class="card-title mb-3">ðŸ¤– Automatic</h5>
                  <p class="card-text text-muted mb-3">Emails sent automatically when you create requests</p>
                  <div class="alert alert-info">
                    <small><strong>Requires:</strong> Gmail access permission</small>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Gmail Authorization Section -->
          <div class="text-center mb-4" id="gmailAuthSection" style="display: none;">
            <div class="card border-primary">
              <div class="card-body">
                <h6 class="card-title">
                  <i class="bi bi-shield-check text-primary me-2"></i>Gmail Authorization Required
                </h6>
                <p class="card-text text-muted mb-3">
                  To use automatic email sending, we need permission to send emails from your Gmail account.
                </p>
                <button type="button" class="btn btn-primary" id="authorizeGmailBtn" onclick="authorizeGmail()">
                  <i class="bi bi-google me-2"></i>Authorize Gmail Access
                </button>
              </div>
            </div>
          </div>

          <div class="text-center">
            <button type="button" class="btn btn-outline-secondary me-2" onclick="prevStep(2)">
              <i class="bi bi-arrow-left me-2"></i>Back
            </button>
            <button type="button" class="btn btn-primary" onclick="nextStep(4)" id="emailNextBtn" disabled>
              Continue <i class="bi bi-arrow-right ms-2"></i>
            </button>
          </div>
        </div>

        <!-- Review Step -->
        <div class="step" id="step4">
          <h4>Review Your Information</h4>
          <p class="text-muted mb-4">Please review your profile information before completing setup</p>

          <div class="card">
            <div class="card-body">
              <div class="row mb-3">
                <div class="col-sm-4"><strong>Name:</strong></div>
                <div class="col-sm-8" id="reviewName">-</div>
              </div>
              <div class="row mb-3">
                <div class="col-sm-4"><strong>Code:</strong></div>
                <div class="col-sm-8" id="reviewCode">-</div>
              </div>
              <div class="row mb-3">
                <div class="col-sm-4"><strong>Email Method:</strong></div>
                <div class="col-sm-8" id="reviewEmailMethod">-</div>
              </div>
              <div class="row mb-3">
                <div class="col-sm-4"><strong>Signature:</strong></div>
                <div class="col-sm-8">
                  <pre id="reviewSignature" class="small text-muted">-</pre>
                </div>
              </div>
            </div>
          </div>

          <div class="text-center mt-4">
            <button type="button" class="btn btn-outline-secondary me-2" onclick="prevStep(3)">
              <i class="bi bi-arrow-left me-2"></i>Back
            </button>
            <button type="button" class="btn btn-success" onclick="completeOnboarding()" id="completeBtn">
              Complete Setup <i class="bi bi-check-circle ms-2"></i>
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      // ===================================================================
      // GLOBAL STATE MANAGEMENT
      // ===================================================================
      let currentStep = 1;
      let onboardingData = {
        name: '',
        code: '',
        signature: '',
        emailPreference: 'manual'
      };
      let gmailAuthorized = false;

      // ===================================================================
      // DATA PERSISTENCE (survives page redirects)
      // ===================================================================
      function saveOnboardingData() {
        sessionStorage.setItem('onboardingData', JSON.stringify(onboardingData));
        console.log('Saved onboarding data:', onboardingData);
      }

      function loadOnboardingData() {
        const saved = sessionStorage.getItem('onboardingData');
        if (saved) {
          onboardingData = JSON.parse(saved);
          console.log('Loaded onboarding data:', onboardingData);
          
          // Restore form fields if they exist
          const nameField = document.getElementById('name');
          const codeField = document.getElementById('code');
          const signatureField = document.getElementById('signature');
          
          if (nameField && onboardingData.name) nameField.value = onboardingData.name;
          if (codeField && onboardingData.code) codeField.value = onboardingData.code;
          if (signatureField && onboardingData.signature) signatureField.value = onboardingData.signature;
        }
      }

      function clearOnboardingData() {
        sessionStorage.removeItem('onboardingData');
      }
      function showToast(message, type = 'info') {
        // Simple toast notification
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 5000);
      }

      function showError(message) {
        showToast(message, 'error');
      }

      function showSuccess(message) {
        showToast(message, 'success');
      }

      function updateProgressBar(step) {
        const progress = (step / 4) * 100;
        const progressBar = document.querySelector('.progress-bar');
        if (progressBar) {
          progressBar.style.width = `${progress}%`;
        }
      }

      function showValidationError(field, message) {
        if (field) {
          field.classList.add('is-invalid');
          const feedback = field.nextElementSibling;
          if (feedback && feedback.classList.contains('invalid-feedback')) {
            feedback.textContent = message;
          }
        }
        showError(message);
      }

      function clearValidationErrors() {
        document.querySelectorAll('.is-invalid').forEach(el => {
          el.classList.remove('is-invalid');
        });
      }

      // ===================================================================
      // STEP NAVIGATION
      // ===================================================================
      function showStep(stepNumber) {
        // Hide all steps
        document.querySelectorAll('.step').forEach(step => {
          step.classList.remove('active');
          step.style.display = 'none';
        });

        // Show target step
        const targetStep = document.getElementById(`step${stepNumber}`);
        if (targetStep) {
          targetStep.classList.add('active');
          targetStep.style.display = 'block';
        }

        currentStep = stepNumber;
        updateProgressBar(stepNumber);

        // Handle step-specific logic
        if (stepNumber === 4) {
          populateReview();
        }
      }

      function nextStep(targetStep) {
        if (currentStep === 2 && !validateProfileStep()) {
          return;
        }
        if (currentStep === 3 && !validateEmailStep()) {
          return;
        }
        
        // Additional check for code availability before moving from step 2
        if (currentStep === 2 && targetStep === 3) {
          checkCodeAndProceed(targetStep);
          return;
        }
        
        showStep(targetStep);
      }

      // Check code availability before proceeding to next step
      async function checkCodeAndProceed(targetStep) {
        const codeField = document.getElementById('code');
        const code = codeField.value.trim().toUpperCase();
        
        if (code.length === 3) {
          // Show loading state
          const continueBtn = document.querySelector('button[onclick="nextStep(3)"]');
          const originalText = continueBtn.innerHTML;
          continueBtn.disabled = true;
          continueBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Checking code...';
          
          const result = await checkCodeAvailability(code);
          
          // Restore button
          continueBtn.disabled = false;
          continueBtn.innerHTML = originalText;
          
          if (result.available) {
            showStep(targetStep);
          } else {
            showValidationError(codeField, result.message || 'Code is not available');
          }
        } else {
          showStep(targetStep);
        }
      }

      function prevStep(targetStep) {
        showStep(targetStep);
      }

      // ===================================================================
      // VALIDATION FUNCTIONS
      // ===================================================================
      function validateProfileStep() {
        clearValidationErrors();
        
        const nameField = document.getElementById('name');
        const codeField = document.getElementById('code');
        const signatureField = document.getElementById('signature');

        let isValid = true;

        // Validate name
        if (!nameField.value.trim()) {
          showValidationError(nameField, 'Name is required');
          isValid = false;
        } else {
          onboardingData.name = nameField.value.trim();
        }

        // Validate code
        const codeValue = codeField.value.trim().toUpperCase();
        if (!codeValue) {
          showValidationError(codeField, 'Code is required');
          isValid = false;
        } else if (codeValue.length !== 3 || !/^[A-Z]{3}$/.test(codeValue)) {
          showValidationError(codeField, 'Code must be exactly 3 uppercase letters');
          isValid = false;
        } else {
          onboardingData.code = codeValue;
          codeField.value = codeValue; // Ensure it's uppercase in the field
        }

        // Validate signature - auto-fill with placeholder if empty
        let signatureValue = signatureField.value.trim();
        if (!signatureValue) {
          // Auto-fill with placeholder if empty (like original behavior)
          const placeholder = signatureField.getAttribute('placeholder');
          if (placeholder) {
            signatureValue = placeholder.trim();
            signatureField.value = placeholder;
          }
        }
        
        if (signatureValue && signatureValue.length >= 2) {
          onboardingData.signature = signatureValue;
        } else {
          showValidationError(signatureField, 'Signature is required and must be at least 2 characters');
          isValid = false;
        }

        // Save data to sessionStorage after validation
        if (isValid) {
          saveOnboardingData();
        }

        return isValid;
      }

      function validateEmailStep() {
        if (!onboardingData.emailPreference) {
          showError('Please select an email method');
          return false;
        }

        if (onboardingData.emailPreference === 'automatic' && !gmailAuthorized) {
          showError('Gmail authorization is required for automatic email sending');
          return false;
        }

        return true;
      }

      // Check code availability in database (matches backend route)
      async function checkCodeAvailability(code) {
        try {
          const response = await fetch('/onboarding/check-code', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ code: code.toUpperCase() }),
          });

          const result = await response.json();
          return result;
        } catch (error) {
          console.error('Code check error:', error);
          return {
            available: false,
            message: 'Error checking code availability'
          };
        }
      }

      function validateEmailStep() {
        if (!onboardingData.emailPreference) {
          showError('Please select an email method');
          return false;
        }

        if (onboardingData.emailPreference === 'automatic' && !gmailAuthorized) {
          showError('Gmail authorization is required for automatic email sending');
          return false;
        }

        return true;
      }

      // ===================================================================
      // EMAIL PREFERENCE HANDLING
      // ===================================================================
      function selectEmailPreference(preference) {
        onboardingData.emailPreference = preference;
        saveOnboardingData(); // Save when email preference changes

        // Update card selection visually
        document.querySelectorAll('.email-method-card').forEach(card => {
          card.classList.remove('border-primary', 'bg-light', 'selected');
        });

        const selectedCard = document.getElementById(preference === 'manual' ? 'manualCard' : 'automaticCard');
        if (selectedCard) {
          selectedCard.classList.add('border-primary', 'bg-light', 'selected');
        }

        // Handle automatic email selection
        if (preference === 'automatic' && !gmailAuthorized) {
          document.getElementById('gmailAuthSection').style.display = 'block';
          document.getElementById('emailNextBtn').disabled = true;
        } else {
          document.getElementById('gmailAuthSection').style.display = 'none';
          document.getElementById('emailNextBtn').disabled = false;
        }
      }

      async function authorizeGmail() {
        try {
          const btn = document.getElementById('authorizeGmailBtn');
          btn.disabled = true;
          btn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Redirecting...';

          // Set redirect target
          await fetch('/auth/set-gmail-redirect', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ redirectTo: '/onboarding?gmail_success=1&step=4' }),
          });

          // Redirect to Gmail OAuth
          window.location.href = '/auth/google/gmail';
        } catch (error) {
          showError('Failed to start Gmail authorization');
          const btn = document.getElementById('authorizeGmailBtn');
          btn.disabled = false;
          btn.innerHTML = '<i class="bi bi-google me-2"></i>Authorize Gmail Access';
        }
      }

      // ===================================================================
      // REVIEW AND COMPLETION
      // ===================================================================
      function populateReview() {
        document.getElementById('reviewName').textContent = onboardingData.name || 'Not set';
        document.getElementById('reviewCode').textContent = onboardingData.code || 'Not set';
        
        // For signature, show the actual value or indicate it will use placeholder
        let signatureDisplay = onboardingData.signature;
        if (!signatureDisplay) {
          const signatureField = document.getElementById('signature');
          const placeholder = signatureField?.getAttribute('placeholder');
          signatureDisplay = placeholder || 'Not set';
        }
        document.getElementById('reviewSignature').textContent = signatureDisplay;
        
        const emailMethod = onboardingData.emailPreference === 'automatic' ? 'Automatic (Gmail)' : 'Manual (Copy & Paste)';
        document.getElementById('reviewEmailMethod').textContent = emailMethod;
      }

      async function completeOnboarding() {
        try {
          const btn = document.getElementById('completeBtn');
          btn.disabled = true;
          btn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Completing...';

          // Ensure signature is populated if empty (final check before sending)
          if (!onboardingData.signature) {
            const signatureField = document.getElementById('signature');
            const placeholder = signatureField?.getAttribute('placeholder');
            if (placeholder) {
              onboardingData.signature = placeholder.trim();
            }
          }

          console.log('Completing onboarding with data:', onboardingData);

          const response = await fetch('/onboarding/complete', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(onboardingData),
          });

          const result = await response.json();
          console.log('Server response:', result);

          if (result.success) {
            showSuccess('Onboarding completed successfully!');
            clearOnboardingData(); // Clean up stored data after successful completion
            setTimeout(() => {
              // Handle both redirect and redirectUrl properties from backend
              window.location.href = result.redirectUrl || result.redirect || '/';
            }, 1500);
          } else {
            // Handle validation errors from backend
            if (result.requiresGmailAuth) {
              showError('Gmail authorization is required for automatic email sending.');
              showStep(3); // Go back to email preference step
            } else if (result.details) {
              // Show field-specific validation errors
              showValidationErrors(result.details);
            } else {
              throw new Error(result.error || 'Failed to complete onboarding');
            }
          }
        } catch (error) {
          console.error('Onboarding error:', error);
          showError(`Failed to complete onboarding: ${error.message}`);
          
          const btn = document.getElementById('completeBtn');
          btn.disabled = false;
          btn.innerHTML = 'Complete Setup <i class="bi bi-check-circle ms-2"></i>';
        }
      }

      // Handle validation errors from server
      function showValidationErrors(errors) {
        clearValidationErrors();
        
        errors.forEach(error => {
          const field = document.getElementById(error.field);
          if (field) {
            showValidationError(field, error.message);
          } else {
            // If field not found, show as general error
            showError(`${error.field}: ${error.message}`);
          }
        });
      }

      // ===================================================================
      // INITIALIZATION
      // ===================================================================
      document.addEventListener('DOMContentLoaded', function() {
        const urlParams = new URLSearchParams(window.location.search);
        const gmailSuccess = urlParams.get('gmail_success') === '1';
        const startStep = parseInt(urlParams.get('step') || '1');

        // Load any saved onboarding data first
        loadOnboardingData();

        // Handle Gmail authorization success
        if (gmailSuccess) {
          gmailAuthorized = true;
          onboardingData.emailPreference = 'automatic';
          saveOnboardingData(); // Save the email preference
          showSuccess('Gmail authorization successful!');
        }

        // Start on the correct step
        showStep(startStep);

        // Auto-uppercase code field and add real-time validation
        const codeField = document.getElementById('code');
        if (codeField) {
          codeField.addEventListener('input', function(e) {
            e.target.value = e.target.value.toUpperCase();
            
            // Clear validation errors when user types
            if (e.target.classList.contains('is-invalid')) {
              e.target.classList.remove('is-invalid');
              const feedback = e.target.nextElementSibling;
              if (feedback && feedback.classList.contains('invalid-feedback')) {
                feedback.textContent = '';
              }
            }
          });

          // Check code availability on blur (when user leaves the field)
          codeField.addEventListener('blur', async function(e) {
            const code = e.target.value.trim();
            if (code.length === 3 && /^[A-Z]{3}$/.test(code)) {
              const result = await checkCodeAvailability(code);
              if (!result.available) {
                showValidationError(e.target, result.message || 'Code is not available');
              }
            }
          });
        }

        // Pre-fill name if available from server
        const nameField = document.getElementById('name');
        if (nameField && nameField.value && !onboardingData.name) {
          onboardingData.name = nameField.value;
          saveOnboardingData();
        }

        // If we're on step 3 and have automatic preference, update UI
        if (startStep === 3 && onboardingData.emailPreference === 'automatic') {
          selectEmailPreference('automatic');
        }
      });
    </script>
  </body>
</html>