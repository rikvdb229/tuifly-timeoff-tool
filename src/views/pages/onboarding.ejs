<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css"
      rel="stylesheet"
    />
    <style>
      :root {
        --tuifly-blue: #007bff;
        --tuifly-yellow: #ffc107;
      }

      body {
        background: linear-gradient(
          135deg,
          var(--tuifly-blue) 0%,
          #0056b3 100%
        );
        min-height: 100vh;
        padding: 20px 0;
      }

      .onboarding-container {
        max-width: 600px;
        margin: 0 auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        overflow: hidden;
      }

      .onboarding-header {
        background: linear-gradient(
          135deg,
          var(--tuifly-blue) 0%,
          #0056b3 100%
        );
        color: white;
        padding: 30px;
        text-align: center;
      }

      .onboarding-header i {
        font-size: 3rem;
        margin-bottom: 10px;
      }

      .onboarding-body {
        padding: 40px;
      }

      .form-control {
        border-radius: 10px;
        padding: 12px 15px;
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
      }

      .form-control:focus {
        border-color: var(--tuifly-blue);
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
      }

      .form-label {
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
      }

      .btn-primary {
        background: var(--tuifly-blue);
        border-color: var(--tuifly-blue);
        padding: 12px 30px;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
      }

      .btn-primary:hover {
        background: #0056b3;
        border-color: #0056b3;
        transform: translateY(-2px);
      }

      .progress {
        height: 8px;
        border-radius: 10px;
        margin-bottom: 30px;
      }

      .progress-bar {
        background: var(--tuifly-blue);
        border-radius: 10px;
      }

      .step {
        display: none;
      }

      .step.active {
        display: block;
        animation: fadeIn 0.5s ease-in;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .welcome-info {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 30px;
        border-left: 4px solid var(--tuifly-blue);
      }

      .input-group-text {
        border-radius: 10px 0 0 10px;
        border: 2px solid #e9ecef;
        border-right: none;
        background: #f8f9fa;
      }

      .input-group .form-control {
        border-left: none;
        border-radius: 0 10px 10px 0;
      }

      .input-group .form-control:focus {
        border-left: none;
      }

      .code-input {
        text-transform: uppercase;
        font-weight: bold;
        font-size: 1.1rem;
        text-align: center;
        border-radius: 10px !important;
        border: 2px solid #e9ecef;
      }

      .code-input:focus {
        border-color: var(--tuifly-blue);
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
      }

      .validation-feedback {
        font-size: 0.875rem;
        margin-top: 5px;
      }

      .system-info {
        background: #e3f2fd;
        border-radius: 10px;
        padding: 20px;
        margin-top: 20px;
      }

      .system-info h6 {
        color: var(--tuifly-blue);
        margin-bottom: 15px;
      }

      .system-info ul {
        margin-bottom: 0;
      }

      .loading {
        display: none;
        text-align: center;
        padding: 20px;
      }

      .loading .spinner-border {
        color: var(--tuifly-blue);
      }

      @media (max-width: 768px) {
        .onboarding-container {
          margin: 0 15px;
        }

        .onboarding-body {
          padding: 30px 20px;
        }
      }
    </style>
  </head>
  <body>
    <div class="onboarding-container">
      <div class="onboarding-header">
        <i class="bi bi-person-plus"></i>
        <h2>Welcome to TUIfly Time-Off</h2>
        <p class="mb-0">Let's set up your profile</p>
      </div>

      <div class="onboarding-body">
        <!-- Progress bar -->
        <div class="progress">
          <div class="progress-bar" role="progressbar" style="width: 33%"></div>
        </div>

        <!-- Welcome Step -->
        <div class="step active" id="step1">
          <div class="welcome-info">
            <h4>
              <i class="bi bi-info-circle text-primary me-2"></i>Welcome, <%=
              user.email %>!
            </h4>
            <p class="mb-0">
              To get started, we need to set up your pilot profile. This
              information will be used for your time-off requests and email
              signatures.
            </p>
          </div>

          <div class="text-center">
            <button type="button" class="btn btn-primary" onclick="nextStep(2)">
              Get Started <i class="bi bi-arrow-right ms-2"></i>
            </button>
          </div>
        </div>

        <!-- Updated Profile Setup Step in src/views/pages/onboarding.ejs -->

        <!-- Updated Profile Setup Step in src/views/pages/onboarding.ejs -->

        <!-- Profile Setup Step -->
        <div class="step" id="step2">
          <form id="onboardingForm">
            <div class="mb-4">
              <label for="name" class="form-label">
                <i class="bi bi-person me-2"></i>Full Name
              </label>
              <input
                type="text"
                class="form-control"
                id="name"
                name="name"
                value="<%= user.name || '' %>"
                placeholder="Enter your full name"
                required
              />
              <div class="form-text">
                This will be used in your email signatures and official requests
              </div>
              <div class="invalid-feedback"></div>
            </div>

            <div class="mb-4">
              <label for="code" class="form-label">
                <i class="bi bi-badge me-2"></i>3-Letter Pilot Code
              </label>
              <input
                type="text"
                class="form-control code-input"
                id="code"
                name="code"
                maxlength="3"
                placeholder="ABC"
                required
              />
              <div class="form-text">
                Your unique 3-letter pilot identification code (e.g., RVB, ABC,
                XYZ)
              </div>
              <div class="invalid-feedback"></div>
            </div>

            <div class="mb-4">
              <label for="signature" class="form-label">
                <i class="bi bi-pencil me-2"></i>Email Signature
              </label>
              <textarea
                class="form-control"
                id="signature"
                name="signature"
                rows="4"
                placeholder="Brgds,
<%= user.name || 'Your Name' %>"
                required
              ></textarea>
              <div class="form-text">
                Your email signature will be automatically added to time-off
                request emails. Use line breaks to format your signature
                properly.
              </div>
              <div class="invalid-feedback"></div>
            </div>

            <div class="text-center">
              <button
                type="button"
                class="btn btn-outline-secondary me-2"
                onclick="prevStep(1)"
              >
                <i class="bi bi-arrow-left me-2"></i>Back
              </button>
              <button
                type="button"
                class="btn btn-primary"
                onclick="nextStep(3)"
              >
                Continue <i class="bi bi-arrow-right ms-2"></i>
              </button>
            </div>
          </form>
        </div>
        <!-- âœ… NEW: Email Preference Step (Step 3) -->
        <div class="step" id="step3">
          <h4>Choose Your Email Method</h4>
          <p class="text-muted mb-4">
            Select how you want to handle time-off request emails. You can
            change this later in settings.
          </p>

          <div class="row justify-content-center">
            <div class="col-md-10">
              <div class="row mb-4">
                <div class="col-md-6 mb-3">
                  <div
                    class="card email-method-card h-100 cursor-pointer"
                    id="onboardingAutomaticCard"
                    onclick="selectOnboardingEmailPreference('automatic')"
                  >
                    <div class="card-body text-center p-4">
                      <div class="mb-3">
                        <i class="bi bi-robot fs-1 text-primary"></i>
                      </div>
                      <h5 class="card-title mb-3">ðŸ¤– Automatic</h5>
                      <p class="card-text text-muted mb-3">
                        Emails sent automatically when you create requests
                      </p>
                      <div class="alert alert-info">
                        <small
                          ><strong>Requires:</strong> Gmail access
                          permission</small
                        >
                      </div>
                      <!-- âœ… NO RADIO BUTTON - completely removed -->
                    </div>
                  </div>
                </div>
                <div class="col-md-6 mb-3">
                  <div
                    class="card email-method-card h-100 cursor-pointer"
                    id="onboardingManualCard"
                    onclick="selectOnboardingEmailPreference('manual')"
                  >
                    <div class="card-body text-center p-4">
                      <div class="mb-3">
                        <i class="bi bi-envelope fs-1 text-success"></i>
                      </div>
                      <h5 class="card-title mb-3">ðŸ“§ Manual</h5>
                      <p class="card-text text-muted mb-3">
                        Copy email content and send from your own client
                      </p>
                      <div class="alert alert-success">
                        <small
                          ><strong>Privacy:</strong> No Gmail access
                          needed</small
                        >
                      </div>
                      <!-- âœ… NO RADIO BUTTON - completely removed -->
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="text-center">
            <button
              type="button"
              class="btn btn-outline-secondary me-2"
              onclick="prevStep(2)"
            >
              <i class="bi bi-arrow-left me-2"></i>Back
            </button>
            <button
              type="button"
              class="btn btn-primary"
              onclick="nextStep(4)"
              id="emailPrefNextBtn"
              disabled
            >
              Continue <i class="bi bi-arrow-right ms-2"></i>
            </button>
          </div>
        </div>
        <!-- Review Step -->
        <div class="step" id="step4">
          <h4>Review Your Information</h4>
          <p class="text-muted">
            Please review your profile information before completing setup.
          </p>

          <div class="row justify-content-center">
            <div class="col-md-8">
              <div class="card">
                <div class="card-body">
                  <h6 class="card-title">
                    <i class="bi bi-person-check me-2"></i>Profile Information
                  </h6>

                  <!-- UPDATED: Single column layout instead of row with col-md-6 -->
                  <div class="review-fields">
                    <div class="review-field mb-3">
                      <strong>Full Name:</strong><br />
                      <span id="reviewName" class="text-muted"></span>
                    </div>

                    <div class="review-field mb-3">
                      <strong>Email:</strong><br />
                      <span class="text-muted"><%= user.email %></span>
                    </div>

                    <div class="review-field mb-3">
                      <strong>Pilot Code:</strong><br />
                      <span id="reviewCode" class="text-muted"></span>
                    </div>

                    <div class="review-field mb-0">
                      <strong>Email Signature:</strong><br />
                      <span
                        id="reviewSignature"
                        class="text-muted"
                        style="white-space: pre-wrap"
                      ></span>
                    </div>
                    <div class="review-field mb-3">
                      <strong>Email Method:</strong><br />
                      <span
                        id="reviewEmailPreference"
                        class="text-muted"
                      ></span>
                    </div>
                  </div>
                </div>
              </div>

              <div class="text-center mt-4">
                <button
                  type="button"
                  class="btn btn-outline-secondary me-2"
                  onclick="prevStep(3)"
                >
                  <i class="bi bi-arrow-left me-2"></i>Back
                </button>
                <button
                  type="button"
                  class="btn btn-primary"
                  onclick="completeOnboarding()"
                >
                  Complete Setup <i class="bi bi-check-circle ms-2"></i>
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Loading -->
        <div class="loading" id="loadingSpinner">
          <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2 text-muted">Setting up your account...</p>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      let currentStep = 1;
      const totalSteps = 4; // âœ… FIXED: Updated to 4 steps

      function updateProgress() {
        const progress = (currentStep / totalSteps) * 100;
        document.querySelector('.progress-bar').style.width = progress + '%';
      }

      function showStep(step) {
        document
          .querySelectorAll('.step')
          .forEach((s) => s.classList.remove('active'));
        document.getElementById(`step${step}`).classList.add('active');
        updateProgress();
      }

      function nextStep(step) {
        if (step === 4) {
          // âœ… FIXED: Review is step 4
          if (validateForm()) {
            updateReview(); // This should work now
            currentStep = step;
            showStep(step);
          }
        } else {
          currentStep = step;
          showStep(step);
        }
      }

      function prevStep(step) {
        currentStep = step;
        showStep(step);
      }

      // âœ… DEFINE: updateReview function
      function updateReview() {
        const nameValue = document.getElementById('name').value;
        const codeValue = document.getElementById('code').value.toUpperCase();
        const signatureValue = document.getElementById('signature').value;

        // Update review fields
        const reviewName = document.getElementById('reviewName');
        const reviewCode = document.getElementById('reviewCode');
        const reviewSignature = document.getElementById('reviewSignature');

        if (reviewName) reviewName.textContent = nameValue;
        if (reviewCode) reviewCode.textContent = codeValue;
        if (reviewSignature) reviewSignature.textContent = signatureValue;

        // âœ… ADD: Show email preference in review
        const emailPrefDisplay =
          window.selectedEmailPreference === 'automatic'
            ? 'ðŸ¤– Automatic (Gmail integration)'
            : 'ðŸ“§ Manual (copy/paste)';

        const reviewEmailPreference = document.getElementById(
          'reviewEmailPreference'
        );
        if (reviewEmailPreference) {
          reviewEmailPreference.textContent = emailPrefDisplay;
        }
      }

      // Auto-fill signature with placeholder if empty
      function autoFillSignature() {
        const signatureField = document.getElementById('signature');
        const placeholderText = signatureField.getAttribute('placeholder');

        // If signature is empty, use the placeholder as default value
        if (!signatureField.value.trim() && placeholderText) {
          signatureField.value = placeholderText;
        }
      }

      function validateForm() {
        // Auto-fill signature if empty before validation
        const signatureField = document.getElementById('signature');
        if (!signatureField.value.trim()) {
          autoFillSignature();
        }

        const name = document.getElementById('name').value.trim();
        const code = document.getElementById('code').value.trim().toUpperCase();
        const signature = document.getElementById('signature').value.trim();

        let isValid = true;

        // âœ… IMPROVED: Clear all previous errors using clearError function
        ['name', 'code', 'signature'].forEach((fieldId) => {
          clearError(fieldId);
        });

        // Validate name
        if (!name || name.length < 2) {
          showError('name', 'Name must be at least 2 characters');
          isValid = false;
        }

        // Validate code
        if (!code || code.length !== 3 || !/^[A-Z]{3}$/.test(code)) {
          showError('code', 'Code must be exactly 3 uppercase letters');
          isValid = false;
        }

        // Validate signature (now should always pass since we auto-fill)
        if (!signature || signature.length < 2) {
          showError('signature', 'Signature must be at least 2 characters');
          isValid = false;
        }

        return isValid;
      }

      // âœ… FIXED: showError function with proper null checks
      function showError(fieldId, message) {
        const field = document.getElementById(fieldId);
        if (!field) {
          console.error(`Field with ID '${fieldId}' not found`);
          return;
        }

        field.classList.add('is-invalid');

        // Find existing feedback element or create one
        let feedbackElement =
          field.parentNode.querySelector('.invalid-feedback');
        if (!feedbackElement) {
          feedbackElement = document.createElement('div');
          feedbackElement.className = 'invalid-feedback';
          field.parentNode.appendChild(feedbackElement);
        }

        feedbackElement.textContent = message;
        feedbackElement.style.display = 'block';
      }

      function clearError(fieldId) {
        const field = document.getElementById(fieldId);
        if (!field) {
          console.error(`Field with ID '${fieldId}' not found`);
          return;
        }

        // Remove invalid styling
        field.classList.remove('is-invalid');

        // Find and hide the error message
        const feedbackElement =
          field.parentNode.querySelector('.invalid-feedback');
        if (feedbackElement) {
          feedbackElement.style.display = 'none';
          feedbackElement.textContent = '';
        }
      }

      // âœ… FIXED: completeOnboarding function
      async function completeOnboarding() {
        const formData = {
          name: document.getElementById('name').value.trim(),
          code: document.getElementById('code').value.trim().toUpperCase(),
          signature: document.getElementById('signature').value.trim(),
          emailPreference: window.selectedEmailPreference || 'manual', // âœ… Include email preference
        };

        try {
          // Show loading
          document.getElementById('step4').style.display = 'none'; // âœ… FIXED: step4
          document.getElementById('loadingSpinner').style.display = 'block';

          const response = await fetch('/onboarding/complete', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
          });

          const result = await response.json();

          if (result.success) {
            // Redirect to dashboard
            window.location.href = result.redirect || '/';
          } else {
            // Show errors
            document.getElementById('loadingSpinner').style.display = 'none';
            document.getElementById('step4').style.display = 'block'; // âœ… FIXED: step4

            if (result.details) {
              result.details.forEach((detail) => {
                showError(detail.field, detail.message);
              });
            } else {
              alert('Error: ' + result.error);
            }
          }
        } catch (error) {
          console.error('Onboarding error:', error);
          document.getElementById('loadingSpinner').style.display = 'none';
          document.getElementById('step4').style.display = 'block'; // âœ… FIXED: step4
          alert('An error occurred. Please try again.');
        }
      }

      // âœ… Email preference selection function
      function selectOnboardingEmailPreference(preference) {
        // Update card styles (no radio buttons)
        document
          .querySelectorAll('#onboardingAutomaticCard, #onboardingManualCard')
          .forEach((card) => {
            card.classList.remove(
              'border-primary',
              'border-success',
              'bg-light',
              'selected'
            );
          });

        const selectedCard = document.getElementById(
          `onboarding${preference.charAt(0).toUpperCase() + preference.slice(1)}Card`
        );
        if (selectedCard) {
          selectedCard.classList.add('bg-light', 'selected');
          selectedCard.classList.add(
            preference === 'automatic' ? 'border-primary' : 'border-success'
          );
        }

        // Enable next button
        const nextBtn = document.getElementById('emailPrefNextBtn');
        if (nextBtn) {
          nextBtn.disabled = false;
        }

        // Store selection globally for form submission
        window.selectedEmailPreference = preference;
      }

      // Real-time code validation
      document.getElementById('code').addEventListener('input', function (e) {
        // Convert to uppercase
        e.target.value = e.target.value.toUpperCase();

        const code = e.target.value.trim();

        // Clear any previous error if user is typing and length is valid
        if (code.length <= 3) {
          clearError('code');
        }

        // Show error if length exceeds 3
        if (code.length > 3) {
          showError('code', 'Code must be exactly 3 characters');
        }
      });

      // Check code availability on blur
      // âœ… UPDATED: Check code availability on blur with proper error clearing
      document
        .getElementById('code')
        .addEventListener('blur', async function (e) {
          const code = e.target.value.trim();
          if (code.length === 3) {
            try {
              const response = await fetch('/onboarding/check-code', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ code }),
              });

              const result = await response.json();

              if (!result.available) {
                showError('code', result.message);
              } else {
                // âœ… FIXED: Properly clear error using clearError function
                clearError('code');
              }
            } catch (error) {
              console.error('Code check error:', error);
              showError('code', 'Error checking code availability');
            }
          } else if (code.length > 0) {
            // âœ… ADD: Show error for invalid length
            showError('code', 'Code must be exactly 3 characters');
          } else {
            // âœ… ADD: Clear error when field is empty
            clearError('code');
          }
        });

      // Initialize
      updateProgress();
      document
        .getElementById('signature')
        .addEventListener('focus', function () {
          if (!this.value.trim()) {
            autoFillSignature();
          }
        });
    </script>
  </body>
</html>
